#include "inc/tm4c123gh6pm.h"
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/interrupt.h"
#include "driverlib/uart.h"

#define LCD (*((volatile uint32_t *)0x400053FC)) // LCD port with Tiva C
#define RS 0x01                                  // RS -> PB0 (0x01)
#define RW 0x02                                  // RW -> PB1 (0x02)
#define EN 0x04                                  // EN -> PB2 (0x04)
#define DATA_MASK 0xF0                           // Mask for data lines PB4, PB5, PB6, PB7

// Function Declaration
void delayUs(int);                     // Delay in Micro Seconds
void delayMs(int);                     // Delay in Milli Seconds
void LCD4bits_Init(void);              // Initialization of LCD Display
void LCD_Write4bits(uint8_t, uint8_t); // Write data (4 bits) to LCD
void LCD_WriteString(const char *);    // Write a string to LCD
void LCD4bits_Cmd(uint8_t);            // Write command to LCD
void LCD4bits_Data(uint8_t);           // Write a character to LCD

int main(void)
{
    const char *str = "E-YANTRA"; // Write any string you want to display on LCD

    LCD4bits_Init();      // Initialization of LCD
    LCD4bits_Cmd(0x01);   // Clear the display
    LCD4bits_Cmd(0x80);   // Force the cursor to the beginning of the 1st line
    delayMs(10);          // Delay 10 ms after initialization
    LCD_WriteString(str); // Write the string to LCD

    while (1)
    {
    } // Infinite loop to keep the program running after completion
}

void LCD4bits_Init(void)
{
    SYSCTL_RCGCGPIO_R |= 0x02;                      // Enable clock for PORTB
    delayMs(10);                                    // Delay 10 ms to enable the clock of PORTB
    GPIO_PORTB_DIR_R |= (RS | RW | EN | DATA_MASK); // Set PORTB pins as output
    GPIO_PORTB_DEN_R |= (RS | RW | EN | DATA_MASK); // Enable PORTB digital IO pins

    // LCD initialization sequence
    LCD4bits_Cmd(0x33); // Initialize LCD in 4-bit mode
    LCD4bits_Cmd(0x32); // Initialize LCD in 4-bit mode
    LCD4bits_Cmd(0x28); // 2 lines and 5x7 character (4-bit data, D4 to D7)
    LCD4bits_Cmd(0x06); // Automatic Increment cursor (shift cursor to the right)
    LCD4bits_Cmd(0x0C); // Display on, cursor off
}

void LCD_Write4bits(uint8_t data, uint8_t control)
{
    data &= DATA_MASK;                                            // Clear lower nibble for control
    control &= ~(DATA_MASK | RW | EN);                            // Clear upper nibble for data
    LCD = (LCD & ~(DATA_MASK | RS | RW | EN)) | (data | control); // Include RS value (command or data) with data
    LCD |= EN;                                                    // Pulse EN
    delayUs(1);                                                   // Delay for pulsing EN
    LCD &= ~EN;                                                   // Turn off the pulse EN
    LCD &= ~(DATA_MASK | RS | RW | EN);                           // Clear the Data and Control lines
}

void LCD_WriteString(const char *str)
{
    int i = 0;

    while (str[i] != '\0')
    {
        LCD4bits_Data(str[i]); // Write each character of the string
        i++;                   // Increment for the next character
    }
}

void LCD4bits_Cmd(uint8_t command)
{
    LCD_Write4bits(command & DATA_MASK, 0); // Upper nibble first
    LCD_Write4bits(command << 4, 0);        // Then lower nibble

    if (command < 4)
        delayMs(2); // Commands 1 and 2 need up to 1.64 ms
    else
        delayUs(40); // All others need 40 us
}

void LCD4bits_Data(uint8_t data)
{
    LCD_Write4bits(data & DATA_MASK, RS); // Upper nibble first
    LCD_Write4bits(data << 4, RS);        // Then lower nibble
    delayUs(40);                          // Delay for LCD (MCU is faster than LCD)
}

void delayMs(int n)
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < 3180; j++)
        {
        } // Delay for 1 millisecond
    }
}

void delayUs(int n)
{
    int i, j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < 3; j++)
        {
        } // Delay for 1 microsecond
    }
}
